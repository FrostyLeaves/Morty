#include "model_struct.hlsl"


//VS    per render
[[vk::binding(0,1)]]cbuffer _M_E_cbWorldMatrix : register(b1)
{
    float4x4 U_matCamProj[CASCADED_SHADOW_MAP_NUM]; // world to proj
};



struct VS_IN
{
    float3 pos : POSITION;

    float3 normal : NORMAL;
    float3 tangent : TANGENT;
    float3 bitangent : BITANGENT;
    float2 uv : TEXCOORDS;
    
#if SKELETON_ENABLE == 1
    int bonesID[MBONES_PER_VERTEX] : BONES_ID;
    float bonesWeight[MBONES_PER_VERTEX] : BONES_WEIGHT;
#endif

};

struct VS_OUT_EMPTY
{
    float4 pos : SV_POSITION;
};

VS_OUT_EMPTY VS(VS_IN input, uint ViewIndex : SV_ViewID)
{
    VS_OUT_EMPTY output;

#if SKELETON_ENABLE == 1

    float4x4 matBoneTransform = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    float fWeight = 1.0f;
    for (int i = 0; i < MBONES_PER_VERTEX; ++i)
    {
        matBoneTransform += U_vBonesMatrix[input.bonesID[i]] * input.bonesWeight[i];
        fWeight = fWeight - input.bonesWeight[i];
    }
    matBoneTransform += float4x4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1) * fWeight;

    float4 posFromBones = mul(float4(input.pos, 1.0f), matBoneTransform);
    output.pos = mul(posFromBones, mul(U_matWorld, U_matCamProj[ViewIndex]));

#else
    output.pos = mul(float4(input.pos, 1.0f), mul(U_matWorld, U_matCamProj[ViewIndex]));
#endif
    return output;
}
