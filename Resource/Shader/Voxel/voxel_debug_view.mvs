#include "Internal/internal_constant.hlsl"
#include "Internal/internal_functional.hlsl"
#include "Internal/internal_model.hlsl"
#include "Voxel/voxel_struct_define.hlsl"


[[vk::binding(1,0)]] cbuffer cbVoxelMap
{
    VoxelMapSetting voxelMapSetting;
};

struct VS_OUT
{    
    float4 pos : SV_POSITION;
    float4 color : u32COLOR;
};

VS_OUT VS_MAIN(VS_IN input, uint INSTANCE_ID : SV_InstanceID)
{
    VS_OUT output;

    uint3 voxelUVW = InstanceIdToVoxelUVW(voxelMapSetting, INSTANCE_ID);

    float3 voxelWorldPosition = VoxelUVWToWorldPosition(voxelMapSetting, voxelUVW);
    voxelWorldPosition = voxelWorldPosition + float3(voxelMapSetting.fVoxelStep);

    float4 worldPos = float4(voxelWorldPosition + input.pos, 1.0f);

    output.pos = mul(worldPos, u_matCamProj);
    output.color = float4(1.0f, 0.0f, 0.0f, 1.0f);

    return output;
}
