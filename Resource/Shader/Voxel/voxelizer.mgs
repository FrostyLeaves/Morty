#include "voxelizer_header.hlsl"
#include "../Model/universal_vsout.hlsl"

[maxvertexcount(3)]
void GS_MAIN(triangle VS_OUT input[3], inout TriangleStream<VS_OUT> triangleStream)
{
	float3 f3FaceNormal = abs(input[0].normal + input[1].normal + input[2].normal);
	uint nMaxNormalIdx = f3FaceNormal[1] > f3FaceNormal[0] ? 1 : 0;
	nMaxNormalIdx = f3FaceNormal[2] > f3FaceNormal[nMaxNormalIdx] ? 2 : nMaxNormalIdx;

	VS_OUT output[3];

#ifdef VOXELIZER_CONSERVATIVE_RASTERIZATION
		float3 f3AabbMin = min(input[0].worldPos.xyz, min(input[1].worldPos.xyz, input[2].worldPos.xyz));
		float3 f3AabbMax = max(input[0].worldPos.xyz, max(input[1].worldPos.xyz, input[2].worldPos.xyz));
#endif

	VoxelClipmap clipmap = voxelMapSetting.vClipmap[voxelMapSetting.nClipmapIdx];

	for (uint i = 0; i < 3; ++i)
	{
		output[i] = input[i];

		float3 pos = input[i].worldPos;

		//range(0, 64)
		pos = (pos - clipmap.f3VoxelOrigin) / clipmap.fVoxelSize;

		//range(0.0f, 1.0f)
		pos = (pos / float(voxelMapSetting.nResolution));

		//inverse y
		pos.y = 1.0f - pos.y;

		[flatten]
		if (nMaxNormalIdx == 0)
		{
			pos = pos.zyx;
		}
		else if (nMaxNormalIdx == 1)
		{
			pos = pos.xzy;
		}
		else
		{
			pos = pos.xyz;
		}

		//inverse y
		pos.y = 1.0f - pos.y;

		//range(-1.0f, 1.0f)
		output[i].pos.xy = pos.xy * 2.0f - float2(1.0f, 1.0f);
		output[i].pos.zw = 1.0f;

#ifdef VOXELIZER_CONSERVATIVE_RASTERIZATION
		output[i].aabbMin = f3AabbMin;
		output[i].aabbMax = f3AabbMax;
#endif

		
		triangleStream.Append(output[i]);
	}




}
